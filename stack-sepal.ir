{:definitions {"render.patcher/find-target" ["defn" "find-target" ["root" "coord"] ["if" ["empty?" "coord"] "root" ["let" [["index" ["first" "coord"]] ["child" ["aget" [".-children" "root"] "index"]]] ["recur" "child" ["rest" "coord"]]]]], "main/dispatch!" ["defn" "dispatch!" ["op" "op-data"] ["let" [["op-id" ["id!"]] ["new-store" ["updater" "@global-store" "op" "op-data" "op-id"]]] ["reset!" "global-store" "new-store"]]], "schema/task" ["def" "task" ["{}" [":id" "nil"] [":text" "|"] [":done?" "false"]]], "render.differ/find-element-diffs" ["defn" "find-element-diffs" ["acc" "n-coord" "old-tree" "new-tree"] ["--" ".log" "js/console" "|element diffing:" "acc" "n-coord" "old-tree" "new-tree"] ["if" ["identical?" "old-tree" "new-tree"] "acc" ["cond" [["component?" "old-tree"] ["recur" "acc" "n-coord" ["get" "old-tree" ":tree"] "new-tree"]] [["component?" "new-tree"] ["recur" "acc" "n-coord" "old-tree" ["get" "new-tree" ":tree"]]] [":else" ["let" [["old-children" [":children" "old-tree"]] ["new-children" [":children" "new-tree"]]] ["if" ["or" ["not=" [":coord" "old-tree"] [":coord" "new-tree"]] ["not=" [":name" "old-tree"] [":name" "new-tree"]] ["not=" [":c-name" "old-tree"] [":c-name" "new-tree"]]] ["conj" "acc" ["[]" ":replace" "n-coord" ["purify-element" "new-tree"]]] ["->" "acc" [["fn" ["acc1"] ["let" [["old-style" [":style" "old-tree"]] ["new-style" [":style" "new-tree"]]] ["if" ["identical?" "old-style" "new-style"] "acc1" ["find-style-diffs" "acc1" "n-coord" "old-style" "new-style"]]]]] ["find-props-diffs" "n-coord" [":attrs" "old-tree"] [":attrs" "new-tree"]] [["fn" ["acc1"] ["let" [["old-events" ["into" ["#{}"] ["keys" [":event" "old-tree"]]]] ["new-events" ["into" ["#{}"] ["keys" [":event" "new-tree"]]]] ["added-events" ["difference" "new-events" "old-events"]] ["removed-events" ["difference" "old-events" "new-events"]] ["changes" ["concat" ["map" ["fn" ["event-name"] ["[]" ":add-event" "n-coord" "event-name"]] "added-events"] ["map" ["fn" ["event-name"] ["[]" ":rm-event" "n-coord" "event-name"]] "removed-events"]]]] ["if" ["empty?" "changes"] "acc1" ["into" ["[]"] ["concat" "acc1" "changes"]]]]]] ["find-children-diffs" "n-coord" "0" "old-children" "new-children"]]]]]]]], "comp.todolist/on-test" ["defn" "on-test" ["e" "dispatch!"] ["println" "|trigger test!"] ["dispatch!" ":clear" "nil"] ["let" [["started" ["io-get-time*"]]] ["loop" ["[]" "x" "200"] ["dispatch!" ":add" "|empty"] ["if" [">" "x" "0"] ["recur" ["dec" "x"]]]] ["loop" ["[]" "x" "20"] ["dispatch!" ":hit-first" ["rand"]] ["if" [">" "x" "0"] ["recur" ["dec" "x"]]]] ["dispatch!" ":clear" "nil"] ["loop" ["[]" "x" "10"] ["dispatch!" ":add" "|only 10 items"] ["if" [">" "x" "0"] ["recur" ["dec" "x"]]]] ["println" "|time cost:" ["-" ["io-get-time*"] "started"]]]], "comp.todolist/on-focus" ["defn" "on-focus" ["e" "dispatch!"] ["println" "|Just focused~"]], "util.detect/element?" ["defn" "element?" ["x"] ["and" ["map?" "x"] ["contains?" "x" ":event"]]], "render.patcher/rm-event" ["defn" "rm-event" ["target" "event-name"] ["let" [["event-prop" ["event->prop" "event-name"]] ["existing-events" ["read-string*" ["aget" [".-dataset" "target"] "|event"]]] ["new-events-list" ["pr-str" ["disj" "existing-events" "event-name"]]]] ["if" ["is-no-bubble?" "event-name"] ["aset" "target" "event-prop" "nil"]] ["aset" [".-dataset" "target"] "|event" "new-events-list"]]], "comp.container/style-states" ["def" "style-states" ["{}" [":padding" "8"]]], "comp.todolist/handle-add" ["defn" "handle-add" ["state" "mutate!"] ["fn" ["e" "dispatch!"] ["dispatch!" ":add" [":draft" "state"]] ["mutate!" ["{}" ":draft" "|"]]]], "util.detect/=seq" ["defn" "=seq" ["a" "b"] ["let" [["a-empty?" ["empty?" "a"]] ["b-empty?" ["empty?" "b"]]] ["if" ["and" "a-empty?" "b-empty?"] "true" ["if" ["or" "a-empty?" "b-empty?"] "false" ["if" ["identical?" ["first" "a"] ["first" "b"]] ["recur" ["rest" "a"] ["rest" "b"]] "false"]]]]], "comp.todolist/on-lock" ["defn" "on-lock" ["locked?" "mutate!"] ["fn" ["e" "dispatch!"] ["mutate!" ["{}" [":locked?" ["not" "locked?"]]]]]], "render.expander/render-component" ["defn" "render-component" ["markup" "states" "build-mutate" "coord" "old-element"] ["let" [["raw-states" ["get" "states" [":name" "markup"]]]] ["--" "println" "|raw states:" "raw-states" ["get" "raw-states" ["quote" "data"]]] ["if" ["and" ["some?" "old-element"] ["identical?" "raw-states" [":raw-states" "old-element"]] ["=seq" [":args" "markup"] [":args" "old-element"]] ["identical?" [":render" "markup"] [":render" "old-element"]]] ["do" ["--" "println" "|not changed" "coord"] "old-element"] ["let" [["begin-time" ["io-get-time*"]] ["args" [":args" "markup"]] ["component" ["first" "markup"]] ["init-state" [":init-state" "markup"]] ["new-coord" ["conj" "coord" [":name" "markup"]]] ["inner-states" ["or" "raw-states" ["{}"]]] ["state" ["if" ["contains?" "inner-states" ["quote" "data"]] ["get" "inner-states" ["quote" "data"]] ["apply" "init-state" "args"]]] ["render" [":render" "markup"]] ["half-render" ["apply" "render" "args"]] ["mutate!" ["build-mutate" "new-coord"]] ["markup-tree" ["half-render" "state" "mutate!"]] ["tree" ["render-markup" "markup-tree" "inner-states" "build-mutate" "new-coord" "new-coord" [":tree" "old-element"]]] ["cost" ["-" ["io-get-time*"] "begin-time"]]] ["--" "println" "|markup tree:" ["pr-str" "markup-tree"]] ["--" "println" "|component state:" "coord" "states"] ["--" "println" "|no cache:" "coord"] ["assoc" "markup" ":coord" "coord" ":tree" "tree" ":cost" "cost" ":raw-states" "raw-states"]]]]], "alias/title" ["defn" "title" ["props" "&" "children"] ["create-element" ":title" "props" "children"]], "render.make-dom/make-element" ["defn" "make-element" ["virtual-element" "no-bubble-collection"] ["let" [["tag-name" ["name" [":name" "virtual-element"]]] ["attrs" [":attrs" "virtual-element"]] ["style" [":style" "virtual-element"]] ["children" [":children" "virtual-element"]] ["element" ["document-create-element*" "tag-name"]] ["child-elements" ["->>" "children" ["map" ["fn" ["entry"] ["make-element" ["last" "entry"] "no-bubble-collection"]]]]] ["event-keys" ["into" ["#{}"] ["keys" [":event" "virtual-element"]]]]] [".setAttr" "element" "|coord" ["pr-str" [":coord" "virtual-element"]]] [".setAttr" "element" "|event" ["pr-str" "event-keys"]] ["doall" ["->>" "attrs" ["map" ["fn" ["entry"] ["let" [["k" ["dashed->camel" ["name" ["first" "entry"]]]] ["v" ["last" "entry"]]] [".setAttr" "element" "k" "v"] ["aset" "element" "k" "v"]]]]]] [".setClassStyle" "element" ["let" [["result" ["->>" "style" ["map" ["fn" ["entry"] ["let" [[["[]" "k" "v"] "entry"]] ["[]" ["dashed->camel" ["name" "k"]] "v"]]]] ["into" ["{}"]] ["clj->js"]]]] [".log" "js/console" "result"] "result"]] ["doall" ["->>" [":event" "virtual-element"] ["map" ["fn" ["entry"] ["--" "println" "|Looking into event:" "entry"] ["let" [["event-name" ["key" "entry"]] ["name-in-string" ["event->prop" "event-name"]] ["maybe-listener" ["get" "no-bubble-collection" "event-name"]]] ["--" "println" "|listener:" "event-name" "maybe-listener" "name-in-string"] ["if" ["some?" "maybe-listener"] ["aset" "element" "name-in-string" "maybe-listener"]]]]]]] ["doseq" ["[]" "child-element" "child-elements"] [".appendChild" "element" "child-element"]] "element"]], "util.detect/component?" ["defn" "component?" ["x"] ["and" ["map?" "x"] ["contains?" "x" ":tree"]]], "render.patcher/rm-element" ["defn" "rm-element" ["target" "op"] [".remove" "target"]], "comp.todolist/init-state" ["defn" "init-state" ["props"] ["{}" [":draft" "|"] [":locked?" "false"]]], "comp.task/style-done" ["def" "style-done" ["{}" [":width" "32"] [":height" "32"] [":outline" ":none"] [":border" ":none"] [":vertical-align" ":middle"]]], "style.widget/input" ["def" "input" ["{}" [":font-size" "|16px"] [":line-height" "|24px"] [":padding" "|0px 8px"] [":outline" ":none"] [":min-width" "|300px"] [":background-color" ["hsl" "0" "0" "94"]] [":border" ":none"]]], "util.format/event->string" ["defn" "event->string" ["x"] ["subs" ["name" "x"] "3"]], "alias/create-comp" ["defn" "create-comp" [["comp-name" "render"] ["create-comp" "comp-name" "default-init" "default-update" "render"]] [["comp-name" "init-state" "update-state" "render"] ["--" "println" "|create component:" "comp-name"] ["let" [["initial-comp" ["{}" [":name" "comp-name"] [":coord" "nil"] [":args" ["[]"]] [":init-state" "init-state"] [":update-state" "update-state"] [":render" "render"] [":tree" "nil"] [":cost" "nil"]]]] ["fn" ["&" "args"] ["assoc" "initial-comp" ":args" "args"]]]]], "controller.client/read-events" ["defn" "read-events" ["target"] ["read-string*" ["aget" [".-attr" "target"] "|event"]]], "comp.todolist/style-list" ["def" "style-list" ["{}" [":color" ":black"] [":background-color" ["hsl" "120" "20" "98"]]]], "updater.core/updater" ["defn" "updater" ["old-store" "op-type" "op-data" "op-id"] ["--" "println" ["pr-str" "old-store"] ["pr-str" "op-type"] ["pr-str" "op-data"]] ["case" "op-type" [":add" ["conj" "old-store" ["{}" ":text" "op-data" ":id" "op-id" ":done?" "false"]]] [":remove" ["->>" "old-store" ["filterv" ["fn" ["task"] ["not" ["=" [":id" "task"] "op-data"]]]]]] [":clear" ["[]"]] [":update" ["let" [["task-id" [":id" "op-data"]] ["text" [":text" "op-data"]]] ["->>" "old-store" ["mapv" ["fn" ["task"] ["if" ["=" [":id" "task"] "task-id"] ["assoc" "task" ":text" "text"] "task"]]]]]] [":hit-first" ["->" "old-store" ["update" "0" ["fn" ["task"] ["assoc" "task" ":text" "op-data"]]]]] [":toggle" ["let" [["task-id" "op-data"]] ["->>" "old-store" ["mapv" ["fn" ["task"] ["if" ["=" [":id" "task"] "task-id"] ["update" "task" ":done?" "not"] "task"]]]]]] "old-store"]], "alias/option" ["defn" "option" ["props" "&" "children"] ["create-element" ":option" "props" "children"]], "alias/default-update" ["def" "default-update" "merge"], "main/render-app!" ["defn" "render-app!" ["target"] ["render!" ["comp-container" "@global-store" "@global-states"] "target" "dispatch!" "global-states"]], "core/gc-states!" ["defn" "gc-states!" ["states-ref"] ["let" [["removed-paths" ["find-removed" "@states-ref" "@global-element" ["[]"]]]] ["if" ["not" ["empty?" "removed-paths"]] ["reset!" "states-ref" ["apply-remove" "@states-ref" "removed-paths"]]]]], "util.format/event->edn" ["defn" "event->edn" ["event"] ["--" ".log" "js/console" "|simplify event:" "event"] ["->" ["case" [".-type" "event"] ["|click" ["{}" ":type" ":click"]] ["|keydown" ["{}" ":type" ":keydown" ":key-code" [".-keyCode" "event"]]] ["|keyup" ["{}" ":type" ":keyup" ":key-code" [".-keyCode" "event"]]] ["|input" ["{}" ":type" ":input" ":value" ["aget" [".-target" "event"] "|value"]]] ["|change" ["{}" ":type" ":change" ":value" ["aget" [".-target" "event"] "|value"]]] ["|focus" ["{}" ":type" ":focus"]] ["{}" ":type" [".-type" "event"] ":msg" ["str" "|Unhandled event: " [".-type" "event"]]]] ["assoc" ":original-event" "event"]]], "alias/button" ["defn" "button" ["props" "&" "children"] ["create-element" ":button" "props" "children"]], "comp.task/init-state" ["defn" "init-state" ["props"] "|"], "render.patcher/add-style" ["defn" "add-style" ["target" "op"] ["let" [["style-name" ["dashed->camel" ["name" ["key" "op"]]]] ["style-value" ["ensure-string" ["val" "op"]]]] ["aset" [".-style" "target"] "style-name" "style-value"]]], "render.patcher/rm-style" ["defn" "rm-style" ["target" "op"] ["let" [["style-name" ["dashed->camel" ["name" "op"]]]] ["aset" [".-style" "target"] "style-name" "nil"]]], "controller.client/dom-registry" ["defonce" "dom-registry" ["atom" ["{}"]]], "util.format/event->prop" ["defn" "event->prop" ["x"] ["str" "|on" ["name" "x"]]], "alias/h1" ["defn" "h1" ["props" "&" "children"] ["create-element" ":h1" "props" "children"]], "comp.task/on-text-state" ["defn" "on-text-state" ["mutate!"] ["fn" ["e" "dispatch!"] ["mutate!" [":value" "e"]]]], "schema/store" ["def" "store" ["[]"]], "util.format/ensure-string" ["defn" "ensure-string" ["x"] ["cond" [["string?" "x"] "x"] [["keyword?" "x"] ["name" "x"]] [":else" ["str" "x"]]]], "util.comparator/type-as-int" ["defn" "type-as-int" ["x"] ["cond" [["number?" "x"] "0"] [["keyword?" "x"] "1"] [["string?" "x"] "2"] [":else" ["raise*" "|use number, keyword or string in coord!"]]]], "main/-main" ["defn" "-main" [] ["enable-console-print!"] ["let" [["target" ["document.createElement" "|div" ["{}"]]]] ["document.documentElement.appendChild" "target"] ["render-app!" "target"] ["add-watch" "global-store" ":gc" ["fn" ["[]"] ["gc-states!" "global-states"]]] ["add-watch" "global-store" ":renderer" ["fn" [] ["render-app!" "target"]]] ["add-watch" "global-states" ":renderer" ["fn" [] ["render-app!" "target"]]]]], "comp.zero/render" ["defn" "render" [] ["fn" ["state" "mutate"] ["div" ["{}" ":attrs" ["{}" ":inner-text" "0"]]]]], "util.gc/find-removed" ["defn" "find-removed" ["state-tree" "element" "base"] ["->>" "state-tree" ["map" ["fn" ["entry"] ["let" [[["[]" "coord-key" "sub-tree"] "entry"]] ["if" ["=" "coord-key" "'data"] ["[]"] ["let" [["this-path" ["conj" "base" "coord-key"]] ["maybe-component" ["get-component-at" "element" "this-path"]]] ["if" ["some?" "maybe-component"] ["find-removed" "sub-tree" "element" "this-path"] ["[]" "this-path"]]]]]]] ["apply" "concat"]]], "controller.client/build-listener" ["defn" "build-listener" ["event-name" "deliver-event"] ["fn" ["event"] ["let" [["target" [".-target" "event"]] ["coord" ["read-coord" "target"]] ["active-events" ["read-events" "target"]] ["simple-event" ["event->edn" "event"]]] ["maybe-trigger" "target" "event-name" "simple-event" "deliver-event"]]]], "render.patcher/add-prop" ["defn" "add-prop" ["target" "op"] ["let" [["prop-name" ["dashed->camel" ["name" ["key" "op"]]]] ["prop-value" ["val" "op"]]] ["case" "prop-name" ["|style" ["aset" "target" "prop-name" ["clj->js" "prop-value"]]] ["aset" "target" "prop-name" "prop-value"]]]], "alias/br" ["defn" "br" ["props" "&" "children"] ["create-element" ":br" "props" "children"]], "render.patcher/apply-dom-changes" ["defn" "apply-dom-changes" ["changes" "mount-point" "no-bubble-collection"] ["let" [["root" [".-firstChild" "mount-point"]]] ["doall" ["->>" "changes" ["map" ["fn" ["op"] ["let" [["op-type" ["first" "op"]] ["coord" ["get" "op" "1"]] ["op-data" ["get" "op" "2"]] ["target" ["find-target" "root" "coord"]]] ["--" "println" "op-type" "target" "op-data"] ["case" "op-type" [":replace-prop" ["replace-prop" "target" "op-data"]] [":add-prop" ["add-prop" "target" "op-data"]] [":rm-prop" ["rm-prop" "target" "op-data"]] [":add-style" ["add-style" "target" "op-data"]] [":replace-style" ["replace-style" "target" "op-data"]] [":rm-style" ["rm-style" "target" "op-data"]] [":add-event" ["add-event" "target" "op-data" "no-bubble-collection"]] [":rm-event" ["rm-event" "target" "op-data"]] [":add" ["add-element" "target" "op-data" "no-bubble-collection"]] [":rm" ["rm-element" "target" "op-data"]] [":replace" ["replace-element" "target" "op-data" "no-bubble-collection"]] [":append" ["append-element" "target" "op-data" "no-bubble-collection"]] ["println" "|not implemented:" "op-type"]]]]]]]]], "alias/script" ["defn" "script" ["props" "&" "children"] ["create-element" ":script" "props" "children"]], "comp.space/render" ["defn" "render" ["w" "h"] ["fn" ["state" "mutate"] ["div" ["{}" [":style" ["style-space" "w" "h"]]]]]], "alias/hr" ["defn" "hr" ["props" "&" "children"] ["create-element" ":hr" "props" "children"]], "alias/link" ["defn" "link" ["props" "&" "children"] ["create-element" ":link" "props" "children"]], "comp.container/render" ["defn" "render" ["store" "states"] ["fn" ["state" "mutate!"] ["div" ["{}"] ["comp-todolist" "store"] ["div" ["{}" [":style" "style-states"]] ["comp-text" ["pr-str" "states"] "nil"]]]]], "util.format/mute-element" ["defn" "mute-element" ["element"] ["if" ["component?" "element"] ["update" "element" ":tree" "mute-element"] ["->" "element" ["update" ":event" ["fn" ["events"] ["list"]]] ["update" ":children" ["fn" ["children"] ["->>" "children" ["map" ["fn" ["entry"] ["[]" ["first" "entry"] ["mute-element" ["last" "entry"]]]]]]]]]]], "alias/span" ["defn" "span" ["props" "&" "children"] ["create-element" ":span" "props" "children"]], "render.patcher/add-event" ["defn" "add-event" ["target" "event-name" "no-bubble-collection"] ["let" [["event-prop" ["event->prop" "event-name"]] ["existing-events" ["read-string*" ["aget" [".-dataset" "target"] "|event"]]] ["new-events-list" ["pr-str" ["conj" "existing-events" "event-name"]]] ["maybe-listener" ["get" "no-bubble-collection" "event-name"]]] ["if" ["some?" "maybe-listener"] ["aset" "target" "event-prop" "maybe-listener"]] ["aset" [".-dataset" "target"] "|event" "new-events-list"]]], "util.information/bubble-events" ["def" "bubble-events" ["[]" ":click" ":dblclick" ":change" ":input" ":keydown" ":keyup" ":wheel" ":mousedown" ":touchstart"]], "comp.task/style-task" ["def" "style-task" ["{}" [":display" ":flex"] [":padding" "|4px 0px"]]], "comp.text/render" ["defn" "render" ["content" "style"] ["fn" ["state" "mutate!"] ["text" ["{}" [":attrs" ["{}" [":value" "content"]]] [":style" "style"]]]]], "core/clear-cache!" ["defn" "clear-cache!" [] ["reset!" "cache-element" "nil"]], "comp.todolist/render" ["defn" "render" ["tasks"] ["fn" ["state" "mutate!"] ["div" ["{}" ":style" "style-root"] ["--" "comp-debug" "state" ["{}" [":left" "|80px"]]] ["div" ["{}" ":style" "style-panel"] ["input" ["{}" [":style" ["merge" "widget/input" ["{}" [":width" ["max" "200" ["+" "24" ["text-width*" [":draft" "state"] "16" "|BlinkMacSystemFont"]]]]]]] [":event" ["{}" [":input" ["on-text-change" "mutate!"]] [":focus" "on-focus"]]] [":attrs" ["{}" ":placeholder" "|Text" ":value" [":draft" "state"]]]]] ["comp-space" "8" "nil"] ["span" ["{}" [":style" "widget/button"] [":event" ["{}" ":click" ["handle-add" "state" "mutate!"]]]] ["comp-text" "|Add" "nil"]] ["comp-space" "8" "nil"] ["span" ["{}" ":style" "widget/button" ":event" ["{}" ":click" "clear-done"] ":attrs" ["{}" ":inner-text" "|Clear"]]] ["comp-space" "8" "nil"] ["div" ["{}"] ["div" ["{}" [":style" "widget/button"] [":event" ["{}" [":click" "on-test"]]]] ["comp-text" "|heavy tasks" "nil"]]]] ["div" ["{}" ":style" "style-list" ":attrs" ["{}" ":class-name" "|task-list"]] ["->>" "tasks" ["reverse"] ["map" ["fn" ["task"] ["[]" [":id" "task"] ["task-component" "task"]]]]]] ["if" [">" ["count" "tasks"] "0"] ["div" ["{}" [":style" "style-toolbar"] [":attrs" ["{}" ":spell-check" "true"]]] ["div" ["{}" [":style" "widget/button"] [":event" ["if" [":locked?" "state"] ["{}"] ["{}" ":click" "clear-done"]]]] ["comp-text" "|Clear2"]] ["comp-space" "8" "nil"] ["div" ["{}" [":style" "widget/button"] [":event" ["{}" ":click" ["on-lock" [":locked?" "state"] "mutate!"]]]] ["comp-text" ["str" "|Lock?" [":locked?" "state"]] "nil"]] ["comp-space" "8" "nil"] ["comp-wrap"]]] ["--" "comp-debug" "tasks" ["{}"]]]]], "controller.deliver/global-mutate-methods" ["defonce" "global-mutate-methods" ["atom" ["{}"]]], "comp.task/render" ["defn" "render" ["task"] ["fn" ["state" "mutate!"] ["div" ["{}" [":style" "style-task"]] ["comp-debug" "task" ["{}" [":right" "8"]]] ["button" ["{}" [":style" ["merge" "style-done" ["{}" [":background-color" ["if" [":done?" "task"] ["hsl" "200" "20" "80"] ["hsl" "200" "80" "70"]]]]]] [":event" ["{}" [":click" ["handle-done" [":id" "task"]]]]]]] ["comp-space" "8" "nil"] ["input" ["{}" ":style" "widget/input" ":event" ["{}" ":input" ["on-text-change" "task"]] ":attrs" ["{}" ":value" [":text" "task"]]]] ["comp-space" "8" "nil"] ["input" ["{}" [":style" "widget/input"] [":event" ["{}" [":input" ["on-text-state" "mutate!"]]]] [":attrs" ["{}" [":value" "state"]]]]] ["comp-space" "8" "nil"] ["div" ["{}" [":style" "widget/button"] [":event" ["{}" ":click" ["handle-remove" "task"]]]] ["comp-text" "|Remove"]] ["comp-space" "8" "nil"] ["div" ["{}"] ["comp-text" "state" "nil"]]]]], "render.expander/render-app" ["defn" "render-app" ["markup" "states" "build-mutate" "old-element"] ["--" "println" "|render loop, states:" ["pr-str" "states"]] ["render-markup" "markup" "states" "build-mutate" ["[]"] ["[]"] "old-element"]], "main/global-states" ["defonce" "global-states" ["atom" ["{}"]]], "comp.todolist/comp-todolist" ["def" "comp-todolist" ["create-comp" ":todolist" "init-state" "update-state" "render"]], "comp.todolist/style-toolbar" ["def" "style-toolbar" ["{}" [":display" ":flex"] [":flex-direction" ":row"] [":justify-content" ":start"] [":padding" "|4px 0"] [":white-space" ":nowrap"]]], "render.expander/render-children" ["defn" "render-children" ["children" "states" "build-mutate" "coord" "comp-coord" "old-children"] ["--" "println" "|render children:" "children"] ["let" [["mapped-cache" ["into" ["{}"] "old-children"]]] ["->>" "children" ["map" ["fn" ["child-entry"] ["let" [["k" ["first" "child-entry"]] ["child-element" ["last" "child-entry"]] ["inner-states" ["or" ["get" "states" "k"] ["{}"]]] ["old-child" ["get" "mapped-cache" "k"]]] ["--" "if" ["nil?" "old-child"] ["do" ["println" "|old child:" "coord" ["some?" "old-child"]]]] ["[]" "k" ["if" ["some?" "child-element"] ["render-markup" "child-element" "inner-states" "build-mutate" ["conj" "coord" "k"] "comp-coord" "old-child"] "nil"]]]]]]]], "comp.debug/render" ["defn" "render" ["data" "more-style"] ["fn" ["state" "mutate!"] ["div" ["{}" ":style" ["merge" "default-style" "more-style"]] ["span" ["{}" ":attrs" ["{}" ":inner-text" ["pr-str" "data"]]]]]]], "alias/html" ["defn" "html" ["props" "&" "children"] ["create-element" ":html" "props" "children"]], "main/global-store" ["defonce" "global-store" ["atom" "schema/store"]], "style.widget/button" ["def" "button" ["{}" [":display" ":inline-block"] [":padding" "|0 6px 0 6px"] [":font-family" "|Avenir,Verdana"] [":cursor" ":pointer"] [":background-color" ["hsl" "0" "80" "70"]] [":color" ["hsl" "0" "0" "100"]] [":height" "28"] [":line-height" "|28px"]]], "alias/canvas" ["defn" "canvas" ["props" "&" "children"] ["create-element" ":canvas" "props" "children"]], "comp.task/handle-done" ["defn" "handle-done" ["task-id"] ["fn" ["e" "dispatch!"] ["dispatch!" ":toggle" "task-id"]]], "render.patcher/replace-element" ["defn" "replace-element" ["target" "op" "no-bubble-collection"] ["let" [["new-element" ["make-element" "op" "no-bubble-collection"]] ["parent-element" [".-parentElement" "target"]]] [".insertBefore" "parent-element" "new-element" "target"] [".remove" "target"]]], "comp.debug/comp-debug" ["def" "comp-debug" ["create-comp" ":debug" "render"]], "render.patcher/add-element" ["defn" "add-element" ["target" "op" "no-bubble-collection"] ["let" [["new-element" ["make-element" "op" "no-bubble-collection"]] ["parent-element" [".-parentElement" "target"]]] [".insertBefore" "parent-element" "new-element" "target"]]], "alias/div" ["defn" "div" ["props" "&" "children"] ["create-element" ":div" "props" "children"]], "controller.client/maybe-trigger" ["defn" "maybe-trigger" ["target" "event-name" "simple-event" "deliver-event"] ["let" [["coord" ["read-coord" "target"]] ["active-events" ["read-events" "target"]]] ["--" ".log" "js/console" "coord" "active-events" "event-name"] ["if" ["contains?" "active-events" "event-name"] ["deliver-event" "coord" "event-name" "simple-event"] ["if" [">" ["count" "coord"] "1"] ["recur" [".-parentElement" "target"] "event-name" "simple-event" "deliver-event"]]]]], "alias/style" ["defn" "style" ["props" "&" "children"] ["create-element" ":style" "props" "children"]], "core/render-element" ["defn" "render-element" ["markup" "states-ref"] ["let" [["build-mutate" ["mutate-factory" "global-element" "states-ref"]]] ["render-app" "markup" "@states-ref" "build-mutate" "@cache-element"]]], "render.patcher/is-no-bubble?" ["defn" "is-no-bubble?" ["event-name"] ["some?" ["some" ["fn" ["x"] ["=" "x" "event-name"]] "no-bubble-events"]]], "alias/select" ["defn" "select" ["props" "&" "children"] ["create-element" ":select" "props" "children"]], "render.differ/find-children-diffs" ["defn" "find-children-diffs" ["acc" "n-coord" "index" "old-children" "new-children"] ["--" ".log" "js/console" "|diff children:" "acc" "n-coord" "index" "old-children" "new-children"] ["let" [["was-empty?" ["empty?" "old-children"]] ["now-empty?" ["empty?" "new-children"]]] ["cond" [["and" "was-empty?" "now-empty?"] "acc"] [["and" "was-empty?" ["not" "now-empty?"]] ["let" [["element" ["last" ["first" "new-children"]]] ["next-acc" ["conj" "acc" ["[]" ":append" "n-coord" ["purify-element" "element"]]]]] ["recur" "next-acc" "n-coord" ["inc" "index"] ["[]"] ["rest" "new-children"]]]] [["and" ["not" "was-empty?"] "now-empty?"] ["let" [["next-acc" ["conj" "acc" ["[]" ":rm" ["conj" "n-coord" "index"]]]]] ["recur" "next-acc" "n-coord" "index" ["rest" "old-children"] ["[]"]]]] [":else" ["let" [["old-keys" ["map" "first" ["take" "32" "old-children"]]] ["new-keys" ["map" "first" ["take" "32" "new-children"]]] ["x1" ["first" "old-keys"]] ["y1" ["first" "new-keys"]] ["x1-remains?" ["some" ["fn" ["x"] ["=" "x" "x1"]] "new-keys"]] ["y1-existed?" ["some" ["fn" ["x"] ["=" "x" "y1"]] "old-keys"]] ["old-follows" ["rest" "old-children"]] ["new-follows" ["rest" "new-children"]]] ["--" "println" "|compare:" "x1" "new-keys" "x1-remains?" "y1" "y1-existed?" "old-keys"] ["cond" [["=" "x1" "y1"] ["let" [["old-element" ["last" ["first" "old-children"]]] ["new-element" ["last" ["first" "new-children"]]] ["next-acc" ["find-element-diffs" "acc" ["conj" "n-coord" "index"] "old-element" "new-element"]]] ["recur" "next-acc" "n-coord" ["inc" "index"] "old-follows" "new-follows"]]] [["and" "x1-remains?" ["not" "y1-existed?"]] ["let" [["next-acc" ["conj" "acc" ["let" [["element" ["last" ["first" "new-children"]]]] ["[]" ":add" ["conj" "n-coord" "index"] ["purify-element" "element"]]]]]] ["recur" "next-acc" "n-coord" ["inc" "index"] "old-children" "new-follows"]]] [["and" ["not" "x1-remains?"] "y1-existed?"] ["let" [["next-acc" ["conj" "acc" ["[]" ":rm" ["conj" "n-coord" "index"]]]]] ["recur" "next-acc" "n-coord" "index" "old-follows" "new-children"]]] [":else" ["let" [["xi" [".indexOf" "new-keys" "x1"]] ["yi" [".indexOf" "old-keys" "y1"]] ["first-old-entry" ["first" "old-children"]] ["first-new-entry" ["first" "new-children"]]] ["--" "println" "|index:" "xi" "yi"] ["if" ["<=" "xi" "yi"] ["let" [["new-element" ["last" ["first" "new-children"]]] ["next-acc" ["conj" "acc" ["[]" ":add" ["conj" "n-coord" "index"] ["purify-element" "new-element"]]]]] ["recur" "next-acc" "n-coord" ["inc" "index"] "old-children" "new-follows"]] ["let" [["next-acc" ["conj" "acc" ["[]" ":rm" ["conj" "n-coord" "index"]]]]] ["recur" "next-acc" "n-coord" "index" "old-follows" "new-children"]]]]]]]]]]], "comp.task/handle-remove" ["defn" "handle-remove" ["task"] ["fn" ["e" "dispatch!"] ["dispatch!" ":remove" [":id" "task"]]]], "core/global-element" ["defonce" "global-element" ["atom" "nil"]], "controller.resolver/get-component-at" ["defn" "get-component-at" [["markup" "coord"] ["get-component-at" "nil" "markup" "coord"]] [["acc" "markup" "coord"] ["if" ["empty?" "coord"] "acc" ["let" [["coord-head" ["first" "coord"]]] ["if" ["component?" "markup"] ["if" ["=" [":name" "markup"] "coord-head"] ["recur" "markup" [":tree" "markup"] ["rest" "coord"]] "nil"] ["let" [["child-pair" ["filter-first" ["fn" ["child-entry"] ["=" ["get" "child-entry" "0"] "coord-head"]] [":children" "markup"]]]] ["if" ["some?" "child-pair"] ["recur" "acc" ["last" "child-pair"] ["rest" "coord"]] "nil"]]]]]]], "alias/default-init" ["defn" "default-init" ["&" "args"] "{}"], "comp.container/comp-container" ["def" "comp-container" ["create-comp" ":container" "render"]], "render.differ/find-style-diffs" ["defn" "find-style-diffs" ["acc" "coord" "old-style" "new-style"] ["let" [["was-empty?" ["empty?" "old-style"]] ["now-empty?" ["empty?" "new-style"]]] ["if" ["identical?" "old-style" "new-style"] "acc" ["cond" [["and" "was-empty?" "now-empty?"] "acc"] [["and" "was-empty?" ["not" "now-empty?"]] ["let" [["entry" ["first" "new-style"]] ["follows" ["rest" "new-style"]]] ["recur" ["conj" "acc" ["[]" ":add-style" "coord" "entry"]] "coord" "old-style" "follows"]]] [["and" ["not" "was-empty?"] "now-empty?"] ["let" [["entry" ["first" "old-style"]] ["follows" ["rest" "old-style"]]] ["recur" ["conj" "acc" ["[]" ":rm-style" "coord" ["key" "entry"]]] "coord" "follows" "new-style"]]] [":else" ["let" [["old-entry" ["first" "old-style"]] ["new-entry" ["first" "new-style"]] ["old-follows" ["rest" "old-style"]] ["new-follows" ["rest" "new-style"]]] ["case" ["compare" ["key" "old-entry"] ["key" "new-entry"]] ["-1" ["recur" ["conj" "acc" ["[]" ":rm-style" "coord" ["key" "old-entry"]]] "coord" "old-follows" "new-style"]] ["1" ["recur" ["conj" "acc" ["[]" ":add-style" "coord" "new-entry"]] "coord" "old-style" "new-follows"]] ["recur" ["if" ["identical?" ["val" "old-entry"] ["val" "new-entry"]] "acc" ["conj" "acc" ["[]" ":replace-style" "coord" "new-entry"]]] "coord" "old-follows" "new-follows"]]]]]]]], "comp.todolist/update-state" ["defn" "update-state" ["old-state" "changes"] ["--" "println" "|changes:" ["pr-str" "old-state"] ["pr-str" "changes"]] ["merge" "old-state" "changes"]], "util.format/dashed->camel" ["defn" "dashed->camel" [["x"] ["dashed->camel" "|" "x" "false"]] [["acc" "piece" "promoted?"] ["if" ["=" "piece" "|"] "acc" ["let" [["cursor" ["get" "piece" "0"]] ["piece-followed" ["subs" "piece" "1"]]] ["if" ["=" "cursor" "|-"] ["recur" "acc" "piece-followed" "true"] ["recur" ["str" "acc" ["if" "promoted?" ["string/upper-case" "cursor"] "cursor"]] "piece-followed" "false"]]]]]], "alias/p" ["defn" "p" ["props" "&" "children"] ["create-element" ":p" "props" "children"]], "util.comparator/compare-more" ["defn" "compare-more" ["x" "y"] ["let" [["type-x" ["type-as-int" "x"]] ["type-y" ["type-as-int" "y"]]] ["if" ["=" "type-x" "type-y"] ["compare" "x" "y"] ["compare" "type-x" "type-y"]]]], "controller.client/read-coord" ["defn" "read-coord" ["target"] ["read-string*" ["aget" [".-attr" "target"] "|coord"]]], "render.patcher/rm-prop" ["defn" "rm-prop" ["target" "op"] ["aset" "target" ["dashed->camel" ["name" "op"]] "nil"]], "controller.client/release-instance" ["defn" "release-instance" ["mount-point"] ["set!" [".-innerHTML" "mount-point"] "|"] ["doall" ["->>" [":listeners" ["get" "@dom-registry" "mount-point"]] ["map" ["fn" ["entry"] ["let" [["event-string" ["name" ["key" "entry"]]] ["listener" ["key" "entry"]]] [".removeEventListener" "mount-point" "event-string" "listener"]]]]]] ["swap!" "dom-registry" "dissoc" "mount-point"]], "alias/code" ["defn" "code" ["props" "&" "children"] ["create-element" ":code" "props" "children"]], "comp.space/comp-space" ["def" "comp-space" ["create-comp" ":space" "render"]], "comp.todolist/style-root" ["def" "style-root" ["{}" [":color" ":black"] [":background-color" ["hsl" "120" "20" "98"]] [":line-height" "|24px"] [":font-size" "16"] [":padding" "10"] [":font-family" "|\"微软雅黑\", Verdana"]]], "core/cache-element" ["defonce" "cache-element" ["atom" "nil"]], "controller.client/patch-instance" ["defn" "patch-instance" ["changes" "mount-point" "deliver-event"] ["let" [["no-bubble-collection" ["->>" "no-bubble-events" ["map" ["fn" ["event-name"] ["[]" "event-name" ["build-listener" "event-name" "deliver-event"]]]] ["into" ["{}"]]]]] ["apply-dom-changes" "changes" "mount-point" "no-bubble-collection"]]], "controller.deliver/all-component-coords" ["defn" "all-component-coords" ["markup"] ["if" ["component?" "markup"] ["cons" [":coord" "markup"] ["all-component-coords" [":tree" "markup"]]] ["->>" [":children" "markup"] ["map" ["fn" ["child-entry"] ["all-component-coords" ["val" "child-entry"]]]] ["apply" "concat"]]]], "alias/section" ["defn" "section" ["props" "&" "children"] ["create-element" ":section" "props" "children"]], "util.gc/remove-by-path" ["defn" "remove-by-path" ["tree" "path"] ["if" ["empty?" "path"] "tree" ["let" [["init-path" ["butlast" "path"]] ["pos" ["last" "path"]]] ["if" ["empty?" "init-path"] ["dissoc" "tree" "pos"] ["update-in" "tree" "init-path" ["fn" ["cursor"] ["dissoc" "cursor" "pos"]]]]]]], "core/mount-app!" ["defn" "mount-app!" ["markup" "target" "dispatch!" "states-ref"] ["let" [["element" ["render-element" "markup" "states-ref"]] ["deliver-event" ["build-deliver-event" "global-element" "dispatch!"]]] ["--" "println" "|mount app"] ["initialize-instance" "target" "deliver-event"] ["activate-instance" ["purify-element" "element"] "target" "deliver-event"] ["reset!" "global-element" "element"] ["reset!" "cache-element" "element"]]], "comp.text/comp-text" ["def" "comp-text" ["create-comp" ":text" "render"]], "alias/arrange-children" ["defn" "arrange-children" ["children"] ["->>" ["if" ["and" ["=" "1" ["count" "children"]] ["not" ["component?" ["first" "children"]]] ["not" ["element?" ["first" "children"]]]] ["first" "children"] ["map-indexed" "vector" "children"]] ["filter" ["fn" ["pair"] ["some?" ["last" "pair"]]]]]], "util.list/filter-first" ["defn" "filter-first" ["f" "xs"] ["reduce" ["fn" ["acc" "x"] ["when" ["f" "x"] ["reduced" "x"]]] "nil" "xs"]], "comp.text/render-code" ["defn" "render-code" ["content" "style"] ["fn" ["state" "mutate!"] ["code" ["{}" [":attrs" ["{}" [":inner-text" "content"]]] [":style" "style"]]]]], "controller.resolver/find-event-target" ["defn" "find-event-target" ["element" "coord" "event-name"] ["let" [["target-element" ["get-markup-at" "element" "coord"]] ["element-exists?" ["some?" "target-element"]]] ["--" "println" "|target element:" ["pr-str" "event-name"]] ["if" ["and" "element-exists?" ["contains?" [":event" "target-element"] "event-name"]] "target-element" ["if" ["=" "coord" ["[]"]] "nil" ["if" "element-exists?" ["recur" "element" ["subvec" "coord" "0" ["-" ["count" "coord"] "1"]] "event-name"] "nil"]]]]], "comp.todolist/clear-done" ["defn" "clear-done" ["e" "dispatch!"] ["println" "|dispatch clear-done"] ["dispatch!" ":clear" "nil"]], "render.patcher/replace-style" ["defn" "replace-style" ["target" "op"] ["let" [["style-name" ["dashed->camel" ["name" ["key" "op"]]]] ["style-value" ["ensure-string" ["val" "op"]]]] ["aset" [".-style" "target"] "style-name" "style-value"]]], "render.patcher/replace-prop" ["defn" "replace-prop" ["target" "op"] ["let" [["prop-name" ["dashed->camel" ["name" ["key" "op"]]]] ["prop-value" ["val" "op"]]] ["if" ["=" "prop-name" "|value"] ["if" ["not=" "prop-value" [".-value" "target"]] ["aset" "target" "prop-name" "prop-value"]] ["aset" "target" "prop-name" "prop-value"]]]], "comp.wrap/comp-wrap" ["def" "comp-wrap" ["create-comp" ":wrap" "render"]], "controller.client/initialize-instance" ["defn" "initialize-instance" ["mount-point" "deliver-event"] ["let" [["bubble-collection" ["->>" "bubble-events" ["map" ["fn" ["event-name"] ["[]" "event-name" ["build-listener" "event-name" "deliver-event"]]]] ["into" ["{}"]]]]] ["doall" ["->>" "bubble-collection" ["map" ["fn" ["entry"] ["let" [["event-string" ["name" ["key" "entry"]]] ["listener" ["val" "entry"]]] [".addEvent" "mount-point" "event-string" "listener"]]]]]] ["swap!" "dom-registry" "assoc" "mount-point" ["{}" [":listeners" "bubble-collection"]]]]], "alias/a" ["defn" "a" ["props" "&" "children"] ["create-element" ":a" "props" "children"]], "util.information/no-bubble-events" ["def" "no-bubble-events" ["[]" ":focus" ":blur" ":scroll"]], "comp.debug/default-style" ["def" "default-style" ["{}" [":position" ":absolute"] [":background-color" ["hsl" "0" "0" "0"]] [":color" ":white"] [":opacity" "0.4"] [":font-size" "|10px"] [":font-family" "|Menlo"] [":box-shadow" ["str" "|0 0 1px " ["hsl" "0" "0" "0" "0.8"]]] [":line-height" "1.6"] [":padding" "|2px 4px"] [":pointer-events" ":none"]]], "alias/text" ["defn" "text" ["props" "&" "children"] ["create-element" ":text" "props" "children"]], "core/render!" ["defn" "render!" ["markup" "target" "dispatch" "states-ref"] ["if" ["some?" "@global-element"] ["rerender-app!" "markup" "target" "dispatch" "states-ref"] ["mount-app!" "markup" "target" "dispatch" "states-ref"]]], "render.expander/render-element" ["defn" "render-element" ["markup" "states" "build-mutate" "coord" "comp-coord" "old-element"] ["let" [["children" [":children" "markup"]] ["child-elements" ["render-children" "children" "states" "build-mutate" "coord" "comp-coord" [":children" "old-element"]]]] ["--" ".log" "js/console" "|children should have order:" ["pr-str" "children"] ["pr-str" "child-elements"] ["pr-str" "markup"]] ["assoc" "markup" ":coord" "coord" ":children" "child-elements"]]], "comp.task/on-text-change" ["defn" "on-text-change" ["task"] ["fn" ["event" "dispatch!"] ["let" [["task-id" [":id" "task"]] ["text" [":value" "event"]]] ["dispatch!" ":update" ["{}" ":id" "task-id" ":text" "text"]]]]], "main/id-ref" ["defonce" "id-ref" ["atom" "0"]], "util.gc/apply-remove" ["defn" "apply-remove" ["state-tree" "removed-paths"] ["if" ["empty?" "removed-paths"] "state-tree" ["let" [["path" ["first" "removed-paths"]] ["next-state" ["remove-by-path" "state-tree" "path"]]] ["recur" "next-state" ["rest" "removed-paths"]]]]], "util.format/purify-element" ["defn" "purify-element" ["markup"] ["if" ["nil?" "markup"] "nil" ["if" ["component?" "markup"] ["recur" [":tree" "markup"]] ["into" ["{}"] ["->" "markup" ["update" ":event" "purify-events"] ["update" ":children" ["fn" ["children"] ["->>" "children" ["map" ["fn" ["entry"] ["[]" ["first" "entry"] ["purify-element" ["last" "entry"]]]]]]]]]]]]], "comp.task/update-state" ["defn" "update-state" ["state" "text"] "text"], "comp.text/comp-code" ["def" "comp-code" ["create-comp" ":code" "render-code"]], "alias/body" ["defn" "body" ["props" "&" "children"] ["create-element" ":body" "props" "children"]], "comp.todolist/on-text-change" ["defn" "on-text-change" ["mutate!"] ["fn" ["e" "dispatch!"] ["mutate!" ["{}" ":draft" [":value" "e"]]]]], "alias/h2" ["defn" "h2" ["props" "&" "children"] ["create-element" ":h2" "props" "children"]], "core/rerender-app!" ["defn" "rerender-app!" ["markup" "target" "dispatch!" "states-ref"] ["let" [["element" ["render-element" "markup" "states-ref"]] ["deliver-event" ["build-deliver-event" "global-element" "dispatch!"]] ["changes" ["find-element-diffs" ["[]"] ["[]"] "@global-element" "element"]]] ["--" "println" "@global-element"] ["--" "println" "|changes:" ["pr-str" ["mapv" ["partial" "take" "2"] "changes"]]] ["patch-instance" "changes" "target" "deliver-event"] ["reset!" "global-element" "element"] ["reset!" "cache-element" "element"]]], "render.expander/render-markup" ["defn" "render-markup" ["markup" "states" "build-mutate" "coord" "component-coord" "old-element"] ["if" ["component?" "markup"] ["render-component" "markup" "states" "build-mutate" "coord" "old-element"] ["render-element" "markup" "states" "build-mutate" "coord" "component-coord" "old-element"]]], "render.differ/find-props-diffs" ["defn" "find-props-diffs" ["acc" "coord" "old-props" "new-props"] ["--" ".log" "js/console" "|find props:" "acc" "coord" "old-props" "new-props" ["count" "old-props"] ["count" "new-props"]] ["let" [["was-empty?" ["empty?" "old-props"]] ["now-empty?" ["empty?" "new-props"]]] ["cond" [["and" "was-empty?" "now-empty?"] "acc"] [["and" "was-empty?" ["not" "now-empty?"]] ["recur" ["conj" "acc" ["[]" ":add-prop" "coord" ["first" "new-props"]]] "coord" "old-props" ["rest" "new-props"]]] [["and" ["not" "was-empty?"] "now-empty?"] ["recur" ["conj" "acc" ["[]" ":rm-prop" "coord" ["key" ["first" "old-props"]]]] "coord" ["rest" "old-props"] "new-props"]] [":else" ["let" [["old-entry" ["first" "old-props"]] ["new-entry" ["first" "new-props"]] [["[]" "old-k" "old-v"] ["first" "old-props"]] [["[]" "new-k" "new-v"] ["first" "new-props"]] ["old-follows" ["rest" "old-props"]] ["new-follows" ["rest" "new-props"]]] ["--" ".log" "js/console" "old-k" "new-k" "old-v" "new-v"] ["case" ["compare" "old-k" "new-k"] ["-1" ["recur" ["conj" "acc" ["[]" ":rm-prop" "coord" "old-k"]] "coord" "old-follows" "new-props"]] ["1" ["recur" ["conj" "acc" ["[]" ":add-prop" "coord" "new-entry"]] "coord" "old-props" "new-follows"]] ["recur" ["if" ["=" "old-v" "new-v"] "acc" ["conj" "acc" ["[]" ":replace-prop" "coord" "new-entry"]]] "coord" "old-follows" "new-follows"]]]]]]], "comp.todolist/style-panel" ["def" "style-panel" ["{}" [":display" ":flex"] [":margin-bottom" "4"] [":flex-direction" ":row"]]], "comp.zero/component-zero" ["def" "component-zero" ["create-comp" ":zero" "render"]], "util.format/prop->attr" ["defn" "prop->attr" ["x"] ["case" "x" ["|class-name" "|class"] "x"]], "alias/pre" ["defn" "pre" ["props" "&" "children"] ["create-element" ":pre" "props" "children"]], "render.patcher/append-element" ["defn" "append-element" ["target" "op" "no-bubble-collection"] ["let" [["new-element" ["make-element" "op" "no-bubble-collection"]]] [".appendChild" "target" "new-element"]]], "main/id!" ["defn" "id!" [] ["swap!" "id-ref" "inc"] "@id-ref"], "alias/create-element" ["defn" "create-element" ["tag-name" "props" "children"] ["let" [["attrs" ["if" ["contains?" "props" ":attrs"] ["sort-by" "first" [":attrs" "props"]] ["list"]]] ["styles" ["if" ["contains?" "props" ":style"] ["sort-by" "first" [":style" "props"]] ["list"]]] ["event" ["if" ["contains?" "props" ":event"] [":event" "props"] ["{}"]]] ["children" ["arrange-children" "children"]]] ["{}" [":name" "tag-name"] [":coord" "nil"] [":attrs" "attrs"] [":style" "styles"] [":event" "event"] [":children" "children"]]]], "alias/textarea" ["defn" "textarea" ["props" "&" "children"] ["create-element" ":textarea" "props" "children"]], "alias/footer" ["defn" "footer" ["props" "&" "children"] ["create-element" ":footer" "props" "children"]], "controller.deliver/build-deliver-event" ["defn" "build-deliver-event" ["element-ref" "dispatch!"] ["fn" ["coord" "event-name" "simple-event"] ["let" [["target-element" ["find-event-target" "@element-ref" "coord" "event-name"]] ["target-component" ["get-component-at" "@element-ref" "coord"]] ["target-listener" ["get" [":event" "target-element"] "event-name"]]] ["if" ["some?" "target-listener"] ["do" ["--" "println" "|listener found:" "coord" "event-name"] ["target-listener" "simple-event" "dispatch!"]] ["--" "println" "|found no listener:" "coord" "event-name"]]]]], "comp.task/on-click" ["defn" "on-click" ["props" "state"] ["fn" ["event" "dispatch!"] ["println" "|clicked."]]], "alias/head" ["defn" "head" ["props" "&" "children"] ["create-element" ":head" "props" "children"]], "comp.task/task-component" ["def" "task-component" ["create-comp" ":task" "init-state" "update-state" "render"]], "alias/header" ["defn" "header" ["props" "&" "children"] ["create-element" ":header" "props" "children"]], "controller.deliver/mutate-factory" ["defn" "mutate-factory" ["global-element" "global-states"] ["fn" ["coord"] ["if" ["contains?" "@global-mutate-methods" "coord"] ["get" "@global-mutate-methods" "coord"] ["let" [["method" ["fn" ["&" "state-args"] ["let" [["component" ["get-markup-at" "@global-element" ["subvec" "coord" "0" ["-" ["count" "coord"] "1"]]]] ["init-state" [":init-state" "component"]] ["update-state" [":update-state" "component"]] ["state-path" ["conj" "coord" ["quote" "data"]]] ["old-state" ["let" [["inner-states" ["get-in" "@global-states" "coord"]]] ["if" ["contains?" "inner-states" ["quote" "data"]] ["get" "inner-states" ["quote" "data"]] ["apply" "init-state" [":args" "component"]]]]] ["new-state" ["apply" "update-state" ["cons" "old-state" "state-args"]]]] ["--" "println" "|compare states:" ["pr-str" "@global-states"] "state-path" ["pr-str" "old-state"] ["pr-str" "new-state"]] ["swap!" "global-states" "assoc-in" ["conj" "coord" ["quote" "data"]] "new-state"]]]]] ["swap!" "global-mutate-methods" "assoc" "coord" "method"] "method"]]]], "alias/meta'" ["defn" "meta'" ["props" "&" "children"] ["create-element" ":meta" "props" "children"]], "controller.client/activate-instance" ["defn" "activate-instance" ["entire-dom" "mount-point" "deliver-event"] ["let" [["no-bubble-collection" ["->>" "no-bubble-events" ["map" ["fn" ["event-name"] ["[]" "event-name" ["build-listener" "event-name" "deliver-event"]]]] ["into" ["{}"]]]]] ["set!" [".-innerHTML" "mount-point"] "|"] [".appendChild" "mount-point" ["make-element" "entire-dom" "no-bubble-collection"]]]], "alias/img" ["defn" "img" ["props" "&" "children"] ["create-element" ":img" "props" "children"]], "controller.resolver/get-markup-at" ["defn" "get-markup-at" ["markup" "coord"] ["--" "println" "|markup:" ["pr-str" "coord"]] ["if" ["empty?" "coord"] "markup" ["if" ["component?" "markup"] ["recur" [":tree" "markup"] ["rest" "coord"]] ["let" [["coord-head" ["first" "coord"]] ["child-pair" ["filter-first" ["fn" ["child-entry"] ["=" ["get" "child-entry" "0"] "coord-head"]] [":children" "markup"]]]] ["if" ["some?" "child-pair"] ["get-markup-at" ["get" "child-pair" "1"] ["rest" "coord"]] ["raise*" ["str" "|child not found:" "coord" ["map" "first" [":children" "markup"]]]]]]]]], "comp.wrap/render" ["defn" "render" [] ["fn" ["state" "mutate!"] ["comp-text" "|pure component component" "nil"]]], "util.format/purify-events" ["defn" "purify-events" ["events"] ["->>" "events" ["map" ["fn" ["entry"] ["[]" ["key" "entry"] "true"]]] ["into" ["{}"]]]], "alias/input" ["defn" "input" ["props" "&" "children"] ["create-element" ":input" "props" "children"]], "comp.space/style-space" ["defn" "style-space" ["w" "h"] ["if" ["some?" "w"] ["{}" [":width" "w"] [":height" "|1px"] [":display" ":inline-block"]] ["{}" [":width" "|1px"] [":height" "h"] [":display" ":inline-block"]]]]}, :namespaces {"comp.zero" ["ns" "respo-weex.comp.zero" [":require" ["[]" "respo-weex.alias" ":refer" ["[]" "create-comp" "div" "span"]]]], "render.differ" ["ns" "respo-weex.render.differ" [":require" ["[]" "clojure.string" ":as" "string"] ["[]" "respo-weex.util.format" ":refer" ["[]" "purify-element"]] ["[]" "respo-weex.util.detect" ":refer" ["[]" "component?"]] ["[]" "clojure.set" ":refer" ["[]" "difference"]]]], "comp.debug" ["ns" "respo-weex.comp.debug" [":require" ["[]" "hsl.core" ":refer" ["[]" "hsl"]] ["[]" "respo-weex.alias" ":refer" ["[]" "create-comp" "div" "span"]]]], "render.expander" ["ns" "respo-weex.render.expander" [":require" ["[]" "clojure.string" ":as" "string"] ["[]" "respo-weex.polyfill" ":refer" ["[]" "io-get-time*"]] ["[]" "respo-weex.util.format" ":refer" ["[]" "purify-element"]] ["[]" "respo-weex.util.detect" ":refer" ["[]" "component?" "element?" "=seq"]] ["[]" "respo-weex.util.list" ":refer" ["[]" "filter-first"]]]], "util.comparator" ["ns" "respo-weex.util.comparator" [":require" ["[]" "respo-weex.polyfill" ":refer" ["[]" "raise*"]]]], "util.gc" ["ns" "respo-weex.util.gc" [":require" ["[]" "respo-weex.util.detect" ":refer" ["[]" "component?"]] ["[]" "clojure.set" ":refer" ["[]" "union"]] ["[]" "respo-weex.controller.resolver" ":refer" ["[]" "get-component-at"]]]], "comp.wrap" ["ns" "respo-weex.comp.wrap" [":require" ["[]" "respo-weex.alias" ":refer" ["[]" "create-comp" "div"]] ["[]" "respo-weex.comp.text" ":refer" ["[]" "comp-text"]]]], "comp.task" ["ns" "respo-weex.comp.task" [":require" ["[]" "clojure.string" ":as" "string"] ["[]" "hsl.core" ":refer" ["[]" "hsl"]] ["[]" "respo-weex.alias" ":refer" ["[]" "div" "input" "span" "create-comp" "button"]] ["[]" "respo-weex.comp.debug" ":refer" ["[]" "comp-debug"]] ["[]" "respo-weex.comp.space" ":refer" ["[]" "comp-space"]] ["[]" "respo-weex.comp.text" ":refer" ["[]" "comp-text"]] ["[]" "respo-weex.style.widget" ":as" "widget"]]], "render.patcher" ["ns" "respo-weex.render.patcher" [":require" ["[]" "clojure.string" ":as" "string"] ["[]" "respo-weex.polyfill" ":refer" ["[]" "read-string*"]] ["[]" "respo-weex.util.format" ":refer" ["[]" "dashed->camel" "event->prop" "ensure-string"]] ["[]" "respo-weex.render.make-dom" ":refer" ["[]" "make-element"]] ["[]" "respo-weex.util.information" ":refer" ["[]" "no-bubble-events"]]]], "render.make-dom" ["ns" "respo-weex.render.make-dom" [":require" ["[]" "clojure.string" ":as" "string"] ["[]" "respo-weex.util.format" ":refer" ["[]" "dashed->camel" "event->prop" "ensure-string"]] ["[]" "respo-weex.polyfill" ":refer" ["[]" "document-create-element*"]]]], "controller.resolver" ["ns" "respo-weex.controller.resolver" [":require" ["[]" "clojure.string" ":as" "string"] ["[]" "respo-weex.util.format" ":refer" ["[]" "purify-element"]] ["[]" "respo-weex.util.detect" ":refer" ["[]" "component?" "element?"]] ["[]" "respo-weex.polyfill" ":refer" ["[]" "raise*"]] ["[]" "respo-weex.util.list" ":refer" ["[]" "filter-first"]]]], "util.list" ["ns" "respo-weex.util.list"], "schema" ["ns" "respo-weex.schema"], "comp.container" ["ns" "respo-weex.comp.container" [":require" ["[]" "respo-weex.alias" ":refer" ["[]" "create-comp" "div"]] ["[]" "respo-weex.comp.text" ":refer" ["[]" "comp-text"]] ["[]" "respo-weex.comp.todolist" ":refer" ["[]" "comp-todolist"]]]], "comp.todolist" ["ns" "respo-weex.comp.todolist" [":require" ["[]" "clojure.string" ":as" "string"] ["[]" "hsl.core" ":refer" ["[]" "hsl"]] ["[]" "respo-weex.comp.task" ":refer" ["[]" "task-component"]] ["[]" "respo-weex.alias" ":refer" ["[]" "div" "span" "input" "create-comp"]] ["[]" "respo-weex.comp.zero" ":refer" ["[]" "component-zero"]] ["[]" "respo-weex.comp.debug" ":refer" ["[]" "comp-debug"]] ["[]" "respo-weex.comp.space" ":refer" ["[]" "comp-space"]] ["[]" "respo-weex.comp.text" ":refer" ["[]" "comp-text"]] ["[]" "respo-weex.comp.wrap" ":refer" ["[]" "comp-wrap"]] ["[]" "respo-weex.polyfill" ":refer" ["[]" "text-width*" "io-get-time*" "set-timeout*"]] ["[]" "respo-weex.style.widget" ":as" "widget"]]], "main" ["ns" "respo-weex.main" [":require" ["[]" "respo-weex.core" ":refer" ["[]" "render!" "clear-cache!" "gc-states!"]] ["[]" "respo-weex.schema" ":as" "schema"] ["[]" "respo-weex.updater.core" ":refer" ["[]" "updater"]] ["[]" "respo-weex.comp.container" ":refer" ["[]" "comp-container"]] ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]]], "controller.deliver" ["ns" "respo-weex.controller.deliver" [":require" ["[]" "respo-weex.controller.resolver" ":refer" ["[]" "find-event-target" "get-markup-at" "get-component-at"]] ["[]" "respo-weex.util.detect" ":refer" ["[]" "component?" "element?"]]]], "comp.space" ["ns" "respo-weex.comp.space" [":require" ["[]" "respo-weex.alias" ":refer" ["[]" "create-comp" "div"]]]], "util.format" ["ns" "respo-weex.util.format" [":require" ["[]" "clojure.string" ":as" "string"] ["[]" "respo-weex.util.detect" ":refer" ["[]" "component?" "element?"]]]], "updater.core" ["ns" "respo-weex.updater.core" [":require" ["[]" "clojure.string" ":as" "string"]]], "comp.text" ["ns" "respo-weex.comp.text" [":require" ["[]" "respo-weex.alias" ":refer" ["[]" "create-comp" "span" "code" "text"]]]], "alias" ["ns" "respo-weex.alias" [":require" ["[]" "respo-weex.util.detect" ":refer" ["[]" "component?" "element?"]]]], "util.detect" ["ns" "respo-weex.util.detect"], "util.information" ["ns" "respo-weex.util.information" [":require" ["[]" "clojure.string" ":as" "string"]]], "controller.client" ["ns" "respo-weex.controller.client" [":require" ["[]" "respo-weex.render.patcher" ":refer" ["[]" "apply-dom-changes"]] ["[]" "respo-weex.polyfill" ":refer" ["[]" "read-string*"]] ["[]" "respo-weex.util.format" ":refer" ["[]" "event->string" "event->edn"]] ["[]" "respo-weex.render.make-dom" ":refer" ["[]" "make-element"]] ["[]" "respo-weex.util.information" ":refer" ["[]" "bubble-events" "no-bubble-events"]]]], "core" ["ns" "respo-weex.core" [":require" ["[]" "respo-weex.alias" ":refer" ["[]" "create-comp" "div" "span"]] ["[]" "respo-weex.render.expander" ":refer" ["[]" "render-app"]] ["[]" "respo-weex.controller.deliver" ":refer" ["[]" "build-deliver-event" "mutate-factory"]] ["[]" "respo-weex.render.differ" ":refer" ["[]" "find-element-diffs"]] ["[]" "respo-weex.util.format" ":refer" ["[]" "purify-element" "mute-element"]] ["[]" "respo-weex.controller.client" ":refer" ["[]" "initialize-instance" "activate-instance" "patch-instance"]] ["[]" "respo-weex.polyfill" ":refer" ["[]" "log*"]] ["[]" "respo-weex.util.gc" ":refer" ["[]" "find-removed" "apply-remove"]]]], "style.widget" ["ns" "respo-weex.style.widget" [":require" ["[]" "hsl.core" ":refer" ["[]" "hsl"]]]]}, :procedures {"comp.zero" [], "render.differ" [], "comp.debug" [], "render.expander" [], "render.html" [], "util.comparator" [], "util.gc" [], "comp.wrap" [], "comp.task" [], "render.patcher" [], "render.make-dom" [], "controller.resolver" [], "util.list" [], "schema" [], "comp.container" [], "types" [], "comp.todolist" [], "main" [["-main"]], "controller.deliver" [], "comp.space" [], "util.format" [], "tree-test" [], "test-component.page" [], "updater.core" [], "comp.text" [], "test-component.todolist" [], "alias" [], "util.detect" [], "html-test" [["deftest" "html-test" ["let" [["todo-demo" ["comp-todolist" "@todolist-store"]]] ["testing" "|test generated HTML" ["is" ["=" ["slurp" "|examples/demo.html"] ["make-string" "todo-demo"]]]]]] ["deftest" "simple-html-test" ["let" [["tree-demo" ["html" ["{}"] ["head" ["{}"] ["title" ["use-text" "|Demo"]] ["link" ["{}" [":attrs" ["{}" [":rel" "|icon"] [":type" "|image/png"]]]]] ["script" ["use-text" "|{}"]]] ["body" ["{}"] ["div" ["{}" ":attrs" ["{}" ":id" "|app"]] ["div" ["{}"]]]]]]] ["testing" "|test generated HTML" ["is" ["=" ["slurp" "|examples/simple.html"] ["make-html" "tree-demo"]]]]]]], "util.information" [], "controller.client" [], "test-component.task" [], "core" [], "style.widget" []}, :package "respo-weex"}